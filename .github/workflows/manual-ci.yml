name: Manual CI/CD Pipeline

# Ce workflow ne se dÃ©clenche que manuellement
# pour Ã©conomiser le quota GitHub Actions
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      run_tests:
        description: 'Run tests'
        required: true
        default: true
        type: boolean

jobs:
  test:
    if: ${{ inputs.run_tests }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18, 20]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: blog_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Setup environment variables
        run: |
          echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/blog_test" >> $GITHUB_ENV
          echo "NEXTAUTH_SECRET=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "NEXTAUTH_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Run type checking
        run: npm run type-check

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm run test:ci

      - name: Build application
        run: npm run build

  manual-notification:
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    steps:
      - name: Notify completion
        run: |
          echo "ðŸŽ‰ Manual CI/CD pipeline completed for environment: ${{ inputs.environment }}"
          echo "Tests run: ${{ inputs.run_tests }}"
          echo "Status: ${{ needs.test.result || 'skipped' }}"
