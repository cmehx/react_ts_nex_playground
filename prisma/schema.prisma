// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  bio           String?
  
  // Security & 2FA
  twoFactorSecret     String?
  twoFactorEnabled    Boolean   @default(false)
  backupCodes         String[]
  lastPasswordChange  DateTime?
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?
  
  // RGPD Compliance
  gdprConsent         Boolean   @default(false)
  gdprConsentDate     DateTime?
  marketingConsent    Boolean   @default(false)
  dataRetentionDate   DateTime?
  deletionRequested   Boolean   @default(false)
  deletionRequestDate DateTime?
  
  // Audit trail
  lastLoginAt         DateTime?
  lastLoginIp         String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relations
  accounts             Account[]
  sessions             Session[]
  posts                Post[]
  comments             Comment[]
  dataExportRequests   DataExportRequest[]
  dataDeletionRequests DataDeletionRequest[]
  consentLogs          ConsentLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String      @db.Text
  excerpt     String?
  published   Boolean     @default(false)
  featured    Boolean     @default(false)
  coverImage  String?
  readingTime Int?        @default(0)
  views       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  publishedAt DateTime?
  
  authorId    String
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  categories  PostCategory[]
  tags        PostTag[]
  comments    Comment[]

  @@index([published, createdAt])
  @@index([authorId])
  @@index([slug])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String   @default("#6B7280")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  posts PostCategory[]
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  color     String   @default("#6B7280")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts PostTag[]
}

model PostCategory {
  id         String   @id @default(cuid())
  postId     String
  categoryId String
  
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([postId, categoryId])
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String
  
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@index([postId])
  @@index([authorId])
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

// Security & Audit Models
model LoginAttempt {
  id        String   @id @default(cuid())
  email     String
  ip        String
  userAgent String?
  success   Boolean
  createdAt DateTime @default(now())
  
  @@index([email, createdAt])
  @@index([ip, createdAt])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([email])
  @@index([expires])
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  email     String
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  @@index([email])
  @@index([expires])
}

// RGPD Compliance Models
model DataExportRequest {
  id          String   @id @default(cuid())
  userId      String
  status      String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  downloadUrl String?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
}

model DataDeletionRequest {
  id         String   @id @default(cuid())
  userId     String
  reason     String?
  status     String   @default("PENDING") // PENDING, APPROVED, REJECTED, COMPLETED
  scheduledFor DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
}

model ConsentLog {
  id           String   @id @default(cuid())
  userId       String
  consentType  String   // GDPR, MARKETING, COOKIES, etc.
  granted      Boolean
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, consentType])
  @@index([createdAt])
}
